a:2:{s:4:"meta";a:3:{s:5:"title";s:16:"datamints_feuser";s:5:"descr";s:40:"A extension for frontend user mangement.";s:7:"options";a:2:{s:10:"usageCount";s:1:"1";s:19:"includeCodeAbstract";s:1:"1";}}s:5:"files";a:2:{s:14:"MD5_2659c86712";a:5:{s:8:"filename";s:35:"class.tx_flexform_getFieldNames.php";s:8:"filesize";i:1842;s:6:"header";a:5:{s:4:"text";s:84:"

Class 'tx_flexform_getFieldNames' which gets all field names from the "fe_users".
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:3:{i:0;s:54:"@author	Bernhard baumgartl <b.baumgartl@datamints.com>";i:1;s:14:"@package	TYPO3";i:2;s:30:"@subpackage	tx_datamintsfeuser";}s:11:"other_index";a:3:{s:7:"@author";a:1:{i:0;s:46:"Bernhard baumgartl <b.baumgartl@datamints.com>";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:19:"tx_datamintsfeuser ";}}}s:3:"DAT";a:2:{i:1;a:5:{s:6:"header";s:33:"class tx_flexform_getFieldNames {";s:5:"class";i:1;s:11:"parentClass";s:25:"tx_flexform_getFieldNames";s:4:"cDat";a:5:{s:4:"text";s:84:"

Class 'tx_flexform_getFieldNames' which gets all field names from the "fe_users".
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:3:{i:0;s:54:"@author	Bernhard baumgartl <b.baumgartl@datamints.com>";i:1;s:14:"@package	TYPO3";i:2;s:30:"@subpackage	tx_datamintsfeuser";}s:11:"other_index";a:3:{s:7:"@author";a:1:{i:0;s:46:"Bernhard baumgartl <b.baumgartl@datamints.com>";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:19:"tx_datamintsfeuser ";}}}s:6:"atLine";i:30;}i:3;a:7:{s:6:"header";s:33:"function getFieldNames($config) {";s:11:"parentClass";s:25:"tx_flexform_getFieldNames";s:4:"cDat";a:3:{s:4:"text";s:98:"

The getFields method is used to get the "fe_users" field names into the flexform of the plugin.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:28:"$config: the fields selected";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:7:"$config";}}s:7:"content";a:2:{i:0;s:367:"
		global $TCA; //Damit $TCA hier zur Verfügung steht
		//$TCA-Teil laden. Damit können wir alle Felder durchgehen
		t3lib_div::loadTCA('fe_users');

		$fieldList = array();
		foreach ($TCA['fe_users']['columns'] as $key => $value){
			$fieldList[] = array( $key, $key);
		}

		$config['items'] = array_merge($config['items'], $fieldList);
		return $config;
	}

}

?>";i:1;i:0;}s:12:"content_size";i:367;s:13:"content_lines";i:16;s:6:"atLine";i:38;}}s:10:"usageCount";a:2:{s:12:"H_3521012205";a:2:{s:24:"_searchtime_milliseconds";d:5;s:15:"_functionHeader";s:33:"class tx_flexform_getFieldNames {";}s:12:"H_f8248cbb61";a:2:{s:24:"_searchtime_milliseconds";d:0;s:15:"_functionHeader";s:33:"function getFieldNames($config) {";}}}s:14:"MD5_8f66ccd171";a:5:{s:8:"filename";s:36:"pi1/class.tx_datamintsfeuser_pi1.php";s:8:"filesize";i:53616;s:6:"header";a:5:{s:4:"text";s:66:"

Plugin 'datamints feuser' for the 'datamints_feuser' extension.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:3:{i:0;s:54:"@author	Bernhard baumgartl <b.baumgartl@datamints.com>";i:1;s:14:"@package	TYPO3";i:2;s:30:"@subpackage	tx_datamintsfeuser";}s:11:"other_index";a:3:{s:7:"@author";a:1:{i:0;s:46:"Bernhard baumgartl <b.baumgartl@datamints.com>";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:19:"tx_datamintsfeuser ";}}}s:3:"DAT";a:25:{i:1;a:8:{s:6:"header";s:51:"class tx_datamintsfeuser_pi1 extends tslib_pibase {";s:5:"class";i:1;s:11:"parentClass";s:22:"tx_datamintsfeuser_pi1";s:4:"cDat";a:5:{s:4:"text";s:66:"

Plugin 'datamints feuser' for the 'datamints_feuser' extension.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:3:{i:0;s:54:"@author	Bernhard baumgartl <b.baumgartl@datamints.com>";i:1;s:14:"@package	TYPO3";i:2;s:30:"@subpackage	tx_datamintsfeuser";}s:11:"other_index";a:3:{s:7:"@author";a:1:{i:0;s:46:"Bernhard baumgartl <b.baumgartl@datamints.com>";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:19:"tx_datamintsfeuser ";}}}s:7:"content";a:2:{i:0;s:440:"	var $prefixId      = 'tx_datamintsfeuser_pi1';		// Same as class name
	var $scriptRelPath = 'pi1/class.tx_datamintsfeuser_pi1.php';	// Path to this script relative to the extension dir.
	var $extKey        = 'datamints_feuser';	// The extension key.
	var $pi_checkCHash = true;
	var $feUsersTca = Array();
	var $storagePid = 0;
	var $contentUid = 0;
	var $conf = Array();
	var $extConf = Array();
	var $lang = Array();
	var $userId = 0;

	";i:1;i:-1;}s:12:"content_size";i:440;s:13:"content_lines";i:12;s:6:"atLine";i:69;}i:3;a:7:{s:6:"header";s:32:"function main($content, $conf) {";s:11:"parentClass";s:22:"tx_datamintsfeuser_pi1";s:4:"cDat";a:3:{s:4:"text";s:32:"

The main method of the PlugIn
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:28:"$content: The PlugIn content";}i:1;a:2:{i:0;s:5:"array";i:1;s:31:"$conf: The PlugIn configuration";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:44:"The content that is displayed on the website";}}s:7:"content";a:2:{i:0;s:507:"		$this->conf = $conf;
		$this->contentUid = $this->cObj->data['uid'];
		$this->pi_setPiVarDefaults();
		$this->pi_loadLL();

		// Debug.
		//$GLOBALS['TSFE']->set_no_cache();
		//$GLOBALS['TYPO3_DB']->debugOutput = true;

		// Flexform und Configurationen laden.
		$this->pi_initPIflexForm();
		$this->getConfiguration();
		$this->getFeUsersTca();
		$this->getStoragePid();

[...]

				break;
			default:
				$content = $this->showForm();
				break;
		}

		return $this->pi_wrapInBaseClass($content);
	}

	";i:1;i:1;}s:12:"content_size";i:3143;s:13:"content_lines";i:72;s:6:"atLine";i:89;}i:5;a:7:{s:6:"header";s:21:"function sendForm() {";s:11:"parentClass";s:22:"tx_datamintsfeuser_pi1";s:4:"cDat";a:3:{s:4:"text";s:119:"

Bereitet die übergebenen Daten für den Import in die Datenbank vor, und führt diesen, wenn es keine Fehler gab, aus.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:8:"$content";}}s:7:"content";a:2:{i:0;s:507:"		// Jedes Element trimmen.
		foreach ($this->piVars as $key => $value) {
			if (!is_array($value)) {
				$this->piVars[$key] = trim($value);
			}
		}

		// Überprüfen ob Datenbankeinträge mit den übergebenen Daten übereinstimmen.
		$uniqueCheck = $this->uniqueCheckForm();
		// Eine Validierung durchführen über alle Felder die eine gesonderte Konfigurtion bekommen haben.
	
[...]
enParams());
						exit;
					}
					$content = $this->pi_getLL('register_success');
				}
			}
		}

		return $content;
	}

	";i:1;i:1;}s:12:"content_size";i:7565;s:13:"content_lines";i:157;s:6:"atLine";i:167;}i:7;a:7:{s:6:"header";s:38:"function generatePassword($password) {";s:11:"parentClass";s:22:"tx_datamintsfeuser_pi1";s:4:"cDat";a:3:{s:4:"text";s:122:"

Erstellt wenn gefordert ein Password, und verschlüsselt dieses, oder das übergebene, wenn es verschlüsselt werden soll.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:9:"$password";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:9:"$password";}}s:7:"content";a:2:{i:0;s:507:"		// Erstellt ein Password.
		if ($this->conf['register.']['generatepassword.']['mode']) {
			$chars = '234567890abcdefghijkmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
			$i = 1;
			$password = '';
			while ($i <= $this->conf['register.']['generatepassword.']['length']) {
				$password .= $chars{mt_rand(0, strlen($chars))};
				$i++;
			}
			// Unverschlüsseltes Password au
[...]
nf']['md5passwords']);
			if ($arrConf['activate'] == 1) {
				$password = md5($password);
			}
		}
		return $password;
	}

	";i:1;i:1;}s:12:"content_size";i:1200;s:13:"content_lines";i:30;s:6:"atLine";i:331;}i:9;a:7:{s:6:"header";s:29:"function requireCheckForm() {";s:11:"parentClass";s:22:"tx_datamintsfeuser_pi1";s:4:"cDat";a:3:{s:4:"text";s:69:"

Überprüft ob alle benötigten Felder mit Inhalten übergeben wurden.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:11:"$valueCheck";}}s:7:"content";a:2:{i:0;s:293:"		// Alle ausgewählten Felder durchgehen.
		$requiredFields = explode(',', str_replace(' ', '', $this->conf['requiredfields']));
		foreach ($requiredFields as $fieldName) {
			if ($this->piVars[$fieldName] == '') {
				$valueCheck[$fieldName] = 'required';
			}
		}
		return $valueCheck;
	}

	";i:1;i:0;}s:12:"content_size";i:293;s:13:"content_lines";i:10;s:6:"atLine";i:367;}i:11;a:7:{s:6:"header";s:25:"function validateForm() {";s:11:"parentClass";s:22:"tx_datamintsfeuser_pi1";s:4:"cDat";a:3:{s:4:"text";s:54:"

Überprüft ob alle Validierungen eingehalten wurden.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:11:"$valueCheck";}}s:7:"content";a:2:{i:0;s:507:"		// Alle ausgewählten Felder durchgehen.
		foreach ($this->conf['validate.'] as $fieldName => $validate) {
			$fieldName = trim($fieldName, '.');

			// Wenn der im TypoScript angegebene Feldname existiert,
			if ($this->feUsersTca['columns'][$fieldName]
					// ein Wert übergeben wurde,
					&& $this->piVars[$fieldName] !== ''
					// der Konfigurierte Modus stimmt,
				
[...]
eCheck[$fieldName] = 'length';
									}
								}
							}
						}
						break;

				}
			}
		}
		return $valueCheck;
	}

	";i:1;i:1;}s:12:"content_size";i:3342;s:13:"content_lines";i:107;s:6:"atLine";i:383;}i:13;a:7:{s:6:"header";s:28:"function uniqueCheckForm() {";s:11:"parentClass";s:22:"tx_datamintsfeuser_pi1";s:4:"cDat";a:3:{s:4:"text";s:109:"

Überprüft die übergebenen Inhalte, bei bestimmten Feldern, ob diese in der Datenbank schon vorhanden sind.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:11:"$valueCheck";}}s:7:"content";a:2:{i:0;s:507:"		// Check unique Fields.
		$uniqueFields = explode(',', str_replace(' ', '', $this->conf['uniquefields']));
		// Wenn User eingeloggt, dann den eigenen Datensatz nicht durchsuchen.
		if ($this->conf['showtype'] == 'edit' && $this->userId) {
			$where = ' AND uid <> ' . $this->userId;
		}
		foreach ($uniqueFields as $fieldName) {
			if (trim(strip_tags($this->piVars[$field
[...]
ssoc($res);
				if ($row['count'] >= 1) {
					$valueCheck[$fieldName] = 'unique';
				}
			}
		}
		return $valueCheck;
	}

	";i:1;i:1;}s:12:"content_size";i:836;s:13:"content_lines";i:18;s:6:"atLine";i:496;}i:15;a:7:{s:6:"header";s:51:"function saveDeleteImage($fieldName, &$arrUpdate) {";s:11:"parentClass";s:22:"tx_datamintsfeuser_pi1";s:4:"cDat";a:3:{s:4:"text";s:80:"

The saveDeleteImage method is used to update or delete an image of an address
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:10:"$fieldName";}i:1;a:2:{i:0;s:5:"array";i:1;s:68:"$arrUpdate // Call by reference Array mit allen zu updatenden Daten.";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:8:"$content";}}s:7:"content";a:2:{i:0;s:507:"		// Verzeichniss ermitteln.
		$uploadFolder = $this->feUsersTca['columns'][$fieldName]['config']['uploadfolder'];
		if (substr($uploadFolder, -1) != '/') {
			$uploadFolder = $uploadFolder . '/';
		}

		// Bild löschen und überprüfen ob das Bild auch wirklich existiert.
		if ($this->piVars[$fieldName . '_delete']) {
			$arrUpdate[$fieldName] = '';
			$res = $GLOBALS['TYPO
[...]
me;
				// Wenn Das Bild erfolgreich hochgeladen wurde, nichts zurückgeben.
				return '';
			}
		}

		return 'upload';
	}

	";i:1;i:1;}s:12:"content_size";i:2320;s:13:"content_lines";i:61;s:6:"atLine";i:522;}i:17;a:7:{s:6:"header";s:59:"function sendMail($templatePart, $extraMarkers = Array()) {";s:11:"parentClass";s:22:"tx_datamintsfeuser_pi1";s:4:"cDat";a:3:{s:4:"text";s:99:"

Sendet die E-Mails mit dem übergebenen Template und falls angegeben, auch mit den extra Markern.
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:13:"$templatePart";}i:1;a:2:{i:0;s:5:"array";i:1;s:13:"$extraMarkers";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:507:"		// Userdaten holen.
		$res = $GLOBALS['TYPO3_DB']->exec_SELECTquery('*', 'fe_users', 'uid = ' . $this->userId , '', '');
		$dataArray = $GLOBALS['TYPO3_DB']->sql_fetch_assoc($res);
		$markerArray = array_merge((Array)$dataArray, (Array)$extraMarkers);
		foreach ($markerArray as $key => $val) {
			if (!$this->check_utf8($val)) {
				$markerArray[$key] = utf8_encode($val);
[...]
conf['register.']['adminname'] . ' <' . $this->conf['register.']['adminmail'] . '>', $subject, $template, $header);
		}
	}

	";i:1;i:1;}s:12:"content_size";i:2741;s:13:"content_lines";i:59;s:6:"atLine";i:591;}i:19;a:7:{s:6:"header";s:28:"function makeDoubleOptIn() {";s:11:"parentClass";s:22:"tx_datamintsfeuser_pi1";s:4:"cDat";a:3:{s:4:"text";s:68:"

Überprüft ob der Double-Opt-In gültig ist und aktiviert den User.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:534:"		// Userdaten holen.
		$res = $GLOBALS['TYPO3_DB']->exec_SELECTquery('uid, username, email, tstamp', 'fe_users', 'uid = ' . intval($this->piVars['uid']) , '', '');
		$row = $GLOBALS['TYPO3_DB']->sql_fetch_assoc($res);
		$hash = md5($row['uid'] . $row['username'] . $row['email'] . $row['tstamp']);
		if ($this->piVars['hash'] == $hash) {
			$GLOBALS['TYPO3_DB']->exec_UPDATEquery('fe_users', 'uid = ' . intval($this->piVars['uid']) , Array('tstamp' => time(), 'disable' => '0'));
			return true;
		} else {
			return false;
		}
	}

	";i:1;i:0;}s:12:"content_size";i:534;s:13:"content_lines";i:12;s:6:"atLine";i:656;}i:21;a:7:{s:6:"header";s:42:"function showForm($valueCheck = Array()) {";s:11:"parentClass";s:22:"tx_datamintsfeuser_pi1";s:4:"cDat";a:3:{s:4:"text";s:111:"

Gibt alle im Backend definierten Felder (TypoScipt/Flexform) formatiert und der Anzeigeart entsprechend aus.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:11:"$valueCheck";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:8:"$content";}}s:7:"content";a:2:{i:0;s:507:"		// Beim editieren der Userdaten, die Felder vorausfüllen.
		if ($this->conf['showtype'] == 'edit') {
			$res = $GLOBALS['TYPO3_DB']->exec_SELECTquery('*', 'fe_users', 'uid = ' . $this->userId , '', '');
            $arrCurrentData = $GLOBALS['TYPO3_DB']->sql_fetch_assoc($res);
		}

		// Wenn das Formular schon einmal abgesendet wurde aber ein Fehler auftrat, dann die ber
[...]
' . $this->conf['showtype']) . '"/></div>';

		$content .= '</fieldset>';
		$content .= '</form>';

		return $content;

	}

	";i:1;i:1;}s:12:"content_size";i:11876;s:13:"content_lines";i:209;s:6:"atLine";i:675;}i:23;a:7:{s:6:"header";s:29:"function makeHiddenFields() {";s:11:"parentClass";s:22:"tx_datamintsfeuser_pi1";s:4:"cDat";a:3:{s:4:"text";s:75:"

Erstellt Hidden Fields für vordefinierte Parameter die übergeben wurden.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:8:"$content";}}s:7:"content";a:2:{i:0;s:326:"		$content = '';
		$hiddenParams = explode(',', str_replace(' ', '', $this->conf['hiddenparams']));
		foreach ($hiddenParams as $paramName) {
			if ($_REQUEST[$paramName]) {
				$content .= '<input type="hidden" name="' . $paramName . '" value="' . strip_tags($_REQUEST[$paramName]) . '" />';
			}
		}
		return $content;
	}

	";i:1;i:0;}s:12:"content_size";i:326;s:13:"content_lines";i:10;s:6:"atLine";i:890;}i:25;a:7:{s:6:"header";s:29:"function makeHiddenParams() {";s:11:"parentClass";s:22:"tx_datamintsfeuser_pi1";s:4:"cDat";a:3:{s:4:"text";s:75:"

Erstellt GET-Parameter für vordefinierte Parameter die übergeben wurden.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:8:"$content";}}s:7:"content";a:2:{i:0;s:473:"		$content = '';
		$hiddenParams = explode(',', str_replace(' ', '', $this->conf['hiddenparams']));
		foreach ($hiddenParams as $paramName) {
			//if (strpos($paramName, '[') !== false) {
			//	$paramName = strstr($paramName, '[');
			//	$paramName = substr($paramName, 0, strpos($paramName, ']'));
			//}
			if ($_REQUEST[$paramName]) {
				$content .= '&' . urlencode($paramName) . '=' . $this->cleanHeaderUrlData($_REQUEST[$paramName]);
			}
		}
		return $content;
	}

	";i:1;i:0;}s:12:"content_size";i:473;s:13:"content_lines";i:14;s:6:"atLine";i:906;}i:27;a:7:{s:6:"header";s:36:"function cleanHeaderUrlData($data) {";s:11:"parentClass";s:22:"tx_datamintsfeuser_pi1";s:4:"cDat";a:3:{s:4:"text";s:79:"

Konvertiert einen String um ihn in der PHP Funktion header nutzen zu können.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:5:"$data";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:5:"$data";}}s:7:"content";a:2:{i:0;s:91:"		$data = urlencode(strip_tags(preg_replace("/[\r\n]/", '', $data)));
		return $data;
	}

	";i:1;i:0;}s:12:"content_size";i:91;s:13:"content_lines";i:4;s:6:"atLine";i:927;}i:29;a:7:{s:6:"header";s:38:"function checkIfRequired($fieldName) {";s:11:"parentClass";s:22:"tx_datamintsfeuser_pi1";s:4:"cDat";a:3:{s:4:"text";s:78:"

Überprüft ob das übergebene Feld benötigt wird um erfolgreich zu speichern.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:10:"$fieldName";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:190:"		$arrRequiredFields = explode(',', str_replace(' ', '', $this->conf['requiredfields']));
		if (in_array($fieldName, $arrRequiredFields)) {
			return ' *';
		} else {
			return '';
		}
	}

	";i:1;i:0;}s:12:"content_size";i:190;s:13:"content_lines";i:8;s:6:"atLine";i:938;}i:31;a:7:{s:6:"header";s:31:"function getLabel($fieldName) {";s:11:"parentClass";s:22:"tx_datamintsfeuser_pi1";s:4:"cDat";a:3:{s:4:"text";s:185:"

Ermittelt ein bestimmtes Label aufgrund des im TCA gespeicherten Languagestrings, des Datenbankfeldnamens oder gibt einfach den übergeben Wert wieder aus, wenn nichts gefunden wurde.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:10:"$fieldName";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:6:"$label";}}s:7:"content";a:2:{i:0;s:507:"		if (strpos($fieldName, 'LLL:') === false) {
			// Label aus der Konfiguration holen basierend auf dem Datenbankfeldnamen.
			$label = $this->pi_getLL($fieldName);
			if ($label) {
				// Das Label zurückliefern.
				return $label;
			}
			// LanguageString ermitteln.
			$languageString = $this->feUsersTca['columns'][$fieldName]['label'];
		} else {
			$languageString = $
[...]
	return $label;
		}
		// Wenn gar nichts gefunden wurde den übergebenen Wert wieder zurückliefern.
		return $fieldName;
	}

	";i:1;i:1;}s:12:"content_size";i:1293;s:13:"content_lines";i:34;s:6:"atLine";i:953;}i:33;a:7:{s:6:"header";s:29:"function getConfiguration() {";s:11:"parentClass";s:22:"tx_datamintsfeuser_pi1";s:4:"cDat";a:5:{s:4:"text";s:123:"

Holt Konfigurationen aus der Flexform (Tab-bedingt) und ersetzt diese pro Konfiguration in der TypoScript Konfiguration.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:1:{i:0;s:19:"@global	$this->conf";}s:11:"other_index";a:1:{s:7:"@global";a:1:{i:0;s:12:"$this->conf ";}}}s:7:"content";a:2:{i:0;s:507:"		// Extension configuration holen.
		$this->extConf = unserialize($GLOBALS['TYPO3_CONF_VARS']['EXT']['extConf'][$this->extKey]);
		// Alle Tabs durchgehn.
		foreach ($this->cObj->data['pi_flexform']['data'] as $tabKey => $val) {
			$this->readFlexformMainTab($this->cObj->data['pi_flexform'], $conf, $tabKey);
		}
		// Alle gesammelten Konfigurationen in $this->conf übertra
[...]
y], $val);
			} else {
				// Alle anderen Konfigurationen...
				$this->setFlexformConfiguration($key, $val);
			}
		}
	}

	";i:1;i:1;}s:12:"content_size";i:768;s:13:"content_lines";i:18;s:6:"atLine";i:994;}i:35;a:7:{s:6:"header";s:56:"function readFlexformMainTab($flexData, &$conf, $sTab) {";s:11:"parentClass";s:22:"tx_datamintsfeuser_pi1";s:4:"cDat";a:3:{s:4:"text";s:76:"

Parsd das Flexform Konfigurations Array und schreibt alle Werte in $conf.
";s:5:"param";a:3:{i:0;a:2:{i:0;s:5:"array";i:1;s:9:"$flexData";}i:1;a:2:{i:0;s:5:"array";i:1;s:5:"$conf";}i:2;a:2:{i:0;s:6:"string";i:1;s:6:"$sType";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:507:"		 if (is_array($flexData)) {
			 if (isset($flexData['data'][$sTab]['lDEF'])) {
				 $flexData = $flexData['data'][$sTab]['lDEF'];
			 }

			 foreach ($flexData as $key => $value) {
				 if (is_array($value['el']) && count($value['el']) > 0) {
					 foreach ($value['el'] as $ekey => $element) {
						 if (isset($element['vDEF'])) {
							 $conf[$ekey] = $element['vDEF'];
[...]
b($value['el'], $conf, $sTab);
				 }
				 if ($value['vDEF']) {
					 $conf[$key] = $value['vDEF'];
				 }
			 }
		 }
	 }

	";i:1;i:1;}s:12:"content_size";i:652;s:13:"content_lines";i:24;s:6:"atLine";i:1021;}i:37;a:7:{s:6:"header";s:49:"function setFlexformConfiguration($key, $value) {";s:11:"parentClass";s:22:"tx_datamintsfeuser_pi1";s:4:"cDat";a:3:{s:4:"text";s:105:"

Überschreibt eventuell vorhandene TypoScript Konfigurationen mit den Konfigurationen aus der Flexform.
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:4:"$key";}i:1;a:2:{i:0;s:6:"string";i:1;s:6:"$value";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:459:"		if (strpos($key, '.') !== false && $value) {
			$arrKey = explode('.', $key);
			for ($i = count($arrKey) - 1; $i >= 0; $i--) {
				$newValue = array();
				if ($i == count($arrKey) - 1) {
					$newValue[$arrKey[$i]] = $value;
				} else {
					$newValue[$arrKey[$i] . '.'] = $value;
				}
				$value = $newValue;
			}
			$this->conf = $this->array_merge_replace_recursive($this->conf, $value);
		} elseif ($value) {
			$this->conf[$key] = $value;
		}
	}

	";i:1;i:0;}s:12:"content_size";i:459;s:13:"content_lines";i:17;s:6:"atLine";i:1053;}i:39;a:7:{s:6:"header";s:41:"function getJSValidationConfiguration() {";s:11:"parentClass";s:22:"tx_datamintsfeuser_pi1";s:4:"cDat";a:3:{s:4:"text";s:94:"

Gibt die komplette Validierungskonfiguration für die JavaScript Frontendvalidierung zurück.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:14:"$configuration";}}s:7:"content";a:2:{i:0;s:507:"		// Hier eine fertig generierte Konfiguration:
		// var config = new Array();
		// config['username'] = new Array();
		// config['username']['validation'] = new Array();
		// config['username']['validation']['type'] = 'username';
		// config['username']['valid'] = 'Der Benutzername darf keine Leerzeichen beinhalten!';
		// config['username']['required'] = 'Es muss ein Ben
[...]
'" . implode("', '", $arrValidationFields) . "'); var contentid = " . $this->contentUid . ";";
		return $configuration;
	}

	";i:1;i:1;}s:12:"content_size";i:4964;s:13:"content_lines";i:77;s:6:"atLine";i:1076;}i:41;a:7:{s:6:"header";s:26:"function getFeUsersTca() {";s:11:"parentClass";s:22:"tx_datamintsfeuser_pi1";s:4:"cDat";a:5:{s:4:"text";s:84:"

Überschreibt eventuell vorhandene TCA Konfiguration mit TypoScript Konfiguration.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:1:{i:0;s:25:"@global	$this->feUsersTca";}s:11:"other_index";a:1:{s:7:"@global";a:1:{i:0;s:18:"$this->feUsersTca ";}}}s:7:"content";a:2:{i:0;s:296:"		$GLOBALS['TSFE']->includeTCA();
		$this->feUsersTca = $GLOBALS['TCA']['fe_users'];
		if ($this->conf['fieldconfig.']) {
			$this->feUsersTca['columns'] = $this->array_merge_replace_recursive((Array)$this->feUsersTca['columns'], (Array)$this->deletePoint($this->conf['fieldconfig.']));
		}
	}

	";i:1;i:0;}s:12:"content_size";i:296;s:13:"content_lines";i:7;s:6:"atLine";i:1160;}i:43;a:7:{s:6:"header";s:26:"function getStoragePid() {";s:11:"parentClass";s:22:"tx_datamintsfeuser_pi1";s:4:"cDat";a:5:{s:4:"text";s:86:"

Ermittelt die General Record Storage Pid bzw. den vom User festgelegten Userfolder.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:1:{i:0;s:25:"@global	$this->storagePid";}s:11:"other_index";a:1:{s:7:"@global";a:1:{i:0;s:18:"$this->storagePid ";}}}s:7:"content";a:2:{i:0;s:218:"		$this->storagePid = $this->conf['register.']['userfolder'];
		if (!$this->storagePid) {
			$arrayRootPids = $GLOBALS['TSFE']->getStorageSiterootPids();
			$this->storagePid = $arrayRootPids['_STORAGE_PID'];
		}
	}

	";i:1;i:0;}s:12:"content_size";i:218;s:13:"content_lines";i:7;s:6:"atLine";i:1174;}i:45;a:7:{s:6:"header";s:30:"function deletePoint($array) {";s:11:"parentClass";s:22:"tx_datamintsfeuser_pi1";s:4:"cDat";a:3:{s:4:"text";s:74:"

Löscht den Punkt den Typo3 bei TypoScript-Variablen (Arrays) hinzufügt.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:6:"$array";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:9:"$newArray";}}s:7:"content";a:2:{i:0;s:507:"		// Neues Array erstellen um das alte Array nicht zu überschreiben.
		$newArray = Array();
		// Alle Elemente des Arrays durchgehen.
		foreach ($array as $key => $val) {
			if (is_array($val)) {
				// Wenn der Inhalt des Elements ein Array ist, letztes Zeichen entfernen (Punkt).
				$newKey = substr($key, 0, -1);
				// Da das Array recursiv sein kann Funktion erneut aus
[...]
Key = $key;
				$newVal = $val;
			}
			// Neues Array füllen.
			$newArray[$newKey] = $newVal;
		}
		return $newArray;
	}

	";i:1;i:1;}s:12:"content_size";i:643;s:13:"content_lines";i:20;s:6:"atLine";i:1188;}i:47;a:4:{s:6:"header";s:49:"function array_merge_replace_recursive($array1) {";s:11:"parentClass";s:22:"tx_datamintsfeuser_pi1";s:4:"cDat";a:3:{s:4:"text";s:232:"

Merges any number of arrays of any dimensions, the later overwriting
previous keys, unless the key is numeric, in whitch case, duplicated
values will not be added.

The arrays to be merged are passed as arguments to the function.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:7:"$array1";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:42:"Resulting array, once all have been merged";}}s:6:"atLine";i:1219;}i:49;a:7:{s:6:"header";s:27:"function check_utf8($str) {";s:11:"parentClass";s:22:"tx_datamintsfeuser_pi1";s:4:"cDat";a:3:{s:4:"text";s:45:"

Checks if a string is utf8 encoded or not.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:4:"$str";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:507:"		$len = strlen($str);
		for($i = 0; $i < $len; $i++){
			$c = ord($str[$i]);
			if ($c > 128) {
				if (($c > 247)) return false;
				elseif ($c > 239) $bytes = 4;
				elseif ($c > 223) $bytes = 3;
				elseif ($c > 191) $bytes = 2;
				else return false;
				if (($i + $bytes) > $len) return false;
				while ($bytes > 1) {
					$i++;
					$b = ord($str[$i]);
					if ($b < 
[...]
)	{
	include_once($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/datamints_feuser/pi1/class.tx_datamintsfeuser_pi1.php']);
}

?>";i:1;i:1;}s:12:"content_size";i:714;s:13:"content_lines";i:30;s:6:"atLine";i:1251;}}s:10:"usageCount";a:25:{s:12:"H_6670368143";a:2:{s:24:"_searchtime_milliseconds";d:0;s:15:"_functionHeader";s:51:"class tx_datamintsfeuser_pi1 extends tslib_pibase {";}s:12:"H_12a661a898";a:2:{s:24:"_searchtime_milliseconds";d:0;s:15:"_functionHeader";s:32:"function main($content, $conf) {";}s:12:"H_da0e5daf7b";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_8f66ccd171";a:3:{s:8:"fileName";s:36:"pi1/class.tx_datamintsfeuser_pi1.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:1;s:15:"_functionHeader";s:21:"function sendForm() {";}s:12:"H_e84e289d8c";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_8f66ccd171";a:3:{s:8:"fileName";s:36:"pi1/class.tx_datamintsfeuser_pi1.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:2;s:15:"_functionHeader";s:38:"function generatePassword($password) {";}s:12:"H_43e13b34ec";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_8f66ccd171";a:3:{s:8:"fileName";s:36:"pi1/class.tx_datamintsfeuser_pi1.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:2;s:15:"_functionHeader";s:29:"function requireCheckForm() {";}s:12:"H_3fb0fa095c";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_8f66ccd171";a:3:{s:8:"fileName";s:36:"pi1/class.tx_datamintsfeuser_pi1.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:1;s:15:"_functionHeader";s:25:"function validateForm() {";}s:12:"H_e94cbdddc4";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_8f66ccd171";a:3:{s:8:"fileName";s:36:"pi1/class.tx_datamintsfeuser_pi1.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:2;s:15:"_functionHeader";s:28:"function uniqueCheckForm() {";}s:12:"H_03a6558032";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_8f66ccd171";a:3:{s:8:"fileName";s:36:"pi1/class.tx_datamintsfeuser_pi1.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:2;s:15:"_functionHeader";s:51:"function saveDeleteImage($fieldName, &$arrUpdate) {";}s:12:"H_6ecd619147";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:3;s:5:"TOTAL";i:3;}s:14:"MD5_8f66ccd171";a:3:{s:8:"fileName";s:36:"pi1/class.tx_datamintsfeuser_pi1.php";s:11:"objectUsage";i:3;s:5:"TOTAL";i:3;}s:24:"_searchtime_milliseconds";d:2;s:15:"_functionHeader";s:59:"function sendMail($templatePart, $extraMarkers = Array()) {";}s:12:"H_30cdbcab5c";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_8f66ccd171";a:3:{s:8:"fileName";s:36:"pi1/class.tx_datamintsfeuser_pi1.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:1;s:15:"_functionHeader";s:28:"function makeDoubleOptIn() {";}s:12:"H_3fe45be608";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:3;s:5:"TOTAL";i:3;}s:14:"MD5_8f66ccd171";a:3:{s:8:"fileName";s:36:"pi1/class.tx_datamintsfeuser_pi1.php";s:11:"objectUsage";i:3;s:5:"TOTAL";i:3;}s:24:"_searchtime_milliseconds";d:2;s:15:"_functionHeader";s:42:"function showForm($valueCheck = Array()) {";}s:12:"H_f2e5e0153c";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_8f66ccd171";a:3:{s:8:"fileName";s:36:"pi1/class.tx_datamintsfeuser_pi1.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:7;s:15:"_functionHeader";s:29:"function makeHiddenFields() {";}s:12:"H_9b86b03ef8";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:7;s:5:"TOTAL";i:7;}s:14:"MD5_8f66ccd171";a:3:{s:8:"fileName";s:36:"pi1/class.tx_datamintsfeuser_pi1.php";s:11:"objectUsage";i:7;s:5:"TOTAL";i:7;}s:24:"_searchtime_milliseconds";d:3;s:15:"_functionHeader";s:29:"function makeHiddenParams() {";}s:12:"H_68634eff2e";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:3;s:5:"TOTAL";i:3;}s:14:"MD5_8f66ccd171";a:3:{s:8:"fileName";s:36:"pi1/class.tx_datamintsfeuser_pi1.php";s:11:"objectUsage";i:3;s:5:"TOTAL";i:3;}s:24:"_searchtime_milliseconds";d:10;s:15:"_functionHeader";s:36:"function cleanHeaderUrlData($data) {";}s:12:"H_2d8afb1caa";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_8f66ccd171";a:3:{s:8:"fileName";s:36:"pi1/class.tx_datamintsfeuser_pi1.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:6;s:15:"_functionHeader";s:38:"function checkIfRequired($fieldName) {";}s:12:"H_8e24527376";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:8;s:5:"TOTAL";i:8;}s:14:"MD5_8f66ccd171";a:3:{s:8:"fileName";s:36:"pi1/class.tx_datamintsfeuser_pi1.php";s:11:"objectUsage";i:8;s:5:"TOTAL";i:8;}s:24:"_searchtime_milliseconds";d:8;s:15:"_functionHeader";s:31:"function getLabel($fieldName) {";}s:12:"H_76555fc26a";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_8f66ccd171";a:3:{s:8:"fileName";s:36:"pi1/class.tx_datamintsfeuser_pi1.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:1;s:15:"_functionHeader";s:29:"function getConfiguration() {";}s:12:"H_798b029a61";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:3;s:5:"TOTAL";i:3;}s:14:"MD5_8f66ccd171";a:3:{s:8:"fileName";s:36:"pi1/class.tx_datamintsfeuser_pi1.php";s:11:"objectUsage";i:3;s:5:"TOTAL";i:3;}s:24:"_searchtime_milliseconds";d:10;s:15:"_functionHeader";s:56:"function readFlexformMainTab($flexData, &$conf, $sTab) {";}s:12:"H_1a2ebda792";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_8f66ccd171";a:3:{s:8:"fileName";s:36:"pi1/class.tx_datamintsfeuser_pi1.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:20;s:15:"_functionHeader";s:49:"function setFlexformConfiguration($key, $value) {";}s:12:"H_ca61886d00";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_8f66ccd171";a:3:{s:8:"fileName";s:36:"pi1/class.tx_datamintsfeuser_pi1.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:2;s:15:"_functionHeader";s:41:"function getJSValidationConfiguration() {";}s:12:"H_d62445db92";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_8f66ccd171";a:3:{s:8:"fileName";s:36:"pi1/class.tx_datamintsfeuser_pi1.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:1;s:15:"_functionHeader";s:26:"function getFeUsersTca() {";}s:12:"H_6ec39f97bc";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_8f66ccd171";a:3:{s:8:"fileName";s:36:"pi1/class.tx_datamintsfeuser_pi1.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:1;s:15:"_functionHeader";s:26:"function getStoragePid() {";}s:12:"H_748e8456a9";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:2;s:5:"TOTAL";i:2;}s:14:"MD5_8f66ccd171";a:3:{s:8:"fileName";s:36:"pi1/class.tx_datamintsfeuser_pi1.php";s:11:"objectUsage";i:2;s:5:"TOTAL";i:2;}s:24:"_searchtime_milliseconds";d:9;s:15:"_functionHeader";s:30:"function deletePoint($array) {";}s:12:"H_559c163ae4";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:5;s:5:"TOTAL";i:5;}s:14:"MD5_8f66ccd171";a:3:{s:8:"fileName";s:36:"pi1/class.tx_datamintsfeuser_pi1.php";s:11:"objectUsage";i:5;s:5:"TOTAL";i:5;}s:24:"_searchtime_milliseconds";d:28;s:15:"_functionHeader";s:49:"function array_merge_replace_recursive($array1) {";}s:12:"H_a2892f4282";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_8f66ccd171";a:3:{s:8:"fileName";s:36:"pi1/class.tx_datamintsfeuser_pi1.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:4;s:15:"_functionHeader";s:27:"function check_utf8($str) {";}}}}}